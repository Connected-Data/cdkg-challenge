1
00:00:00,700 --> 00:00:02,000
I'm Rafael Goncalves.

2
00:00:02,140 --> 00:00:03,900
I'm a research scientist at

3
00:00:03,900 --> 00:00:05,680
the Stanford Center
for Biomedical

4
00:00:05,820 --> 00:00:07,740
Informatics Research
at Stanford

5
00:00:07,740 --> 00:00:10,300
University. And in this talk,

6
00:00:10,300 --> 00:00:12,140
I will describe
software developed

7
00:00:12,140 --> 00:00:14,495
by the Protege team and how

8
00:00:14,495 --> 00:00:16,015
various collaborations between

9
00:00:16,015 --> 00:00:18,415
our team and industry have led

10
00:00:18,415 --> 00:00:20,415
to substantial
improvements and

11
00:00:20,415 --> 00:00:22,495
to new functionality
in the protege

12
00:00:22,495 --> 00:00:24,655
software. I'll describe what

13
00:00:24,655 --> 00:00:25,870
these new features are,

14
00:00:26,590 --> 00:00:28,350
how people have
worked with them,

15
00:00:28,350 --> 00:00:30,610
and where our team
is going from here.

16
00:00:32,670 --> 00:00:34,750
The Protege team
at Stanford has

17
00:00:34,750 --> 00:00:36,370
been developing
and maintaining

18
00:00:36,510 --> 00:00:38,450
knowledge
representation software

19
00:00:38,510 --> 00:00:40,130
since the very
early nineties.

20
00:00:40,755 --> 00:00:42,275
It all started
with the Protege

21
00:00:42,275 --> 00:00:44,455
desktop tool,
which is a platform

22
00:00:44,515 --> 00:00:46,835
independent open
source software

23
00:00:46,835 --> 00:00:47,975
for building ontologies.

24
00:00:49,075 --> 00:00:50,695
Protege has an extensible

25
00:00:50,835 --> 00:00:52,835
architecture that allows third

26
00:00:52,835 --> 00:00:54,855
party developers to
create plugins,

27
00:00:55,170 --> 00:00:56,770
which enhance
the core functionality

28
00:00:56,770 --> 00:00:58,070
of the Prodigy software.

29
00:00:59,410 --> 00:01:00,610
About twelve years ago,

30
00:01:00,610 --> 00:01:02,450
the Prodigy team realized that

31
00:01:02,450 --> 00:01:04,610
there was a need
for a tool that

32
00:01:04,610 --> 00:01:06,950
facilitated real
time collaboration

33
00:01:07,655 --> 00:01:08,475
between ontology,

34
00:01:08,615 --> 00:01:10,535
ontology developers
and subject

35
00:01:10,535 --> 00:01:11,595
matter experts.

36
00:01:12,375 --> 00:01:13,835
So the protege team developed

37
00:01:14,135 --> 00:01:16,395
Web Protege, a web
based ontology

38
00:01:16,455 --> 00:01:18,695
editor that is
rich with features

39
00:01:18,695 --> 00:01:19,435
for collaboration,

40
00:01:20,090 --> 00:01:21,930
and it has a simplified user

41
00:01:21,930 --> 00:01:23,790
interface for
ontology editing.

42
00:01:24,490 --> 00:01:26,350
So nowadays, our team supports

43
00:01:26,410 --> 00:01:29,230
two different yet
complementary tools,

44
00:01:29,610 --> 00:01:31,870
the desktop protege
and web protege.

45
00:01:32,730 --> 00:01:34,490
In this talk, I will focus on

46
00:01:34,490 --> 00:01:35,230
web protege.

47
00:01:36,735 --> 00:01:38,255
I'll just say
a few words about

48
00:01:38,255 --> 00:01:39,875
the protege user community.

49
00:01:40,655 --> 00:01:42,015
Over three hundred and sixty

50
00:01:42,015 --> 00:01:43,775
five thousand users
have registered

51
00:01:43,775 --> 00:01:45,395
to download protege software,

52
00:01:45,695 --> 00:01:47,375
although we don't
don't require

53
00:01:47,375 --> 00:01:49,800
them to do so. Over twenty one

54
00:01:49,800 --> 00:01:51,160
thousand users subscribe to

55
00:01:51,160 --> 00:01:52,680
protege mailing
lists to receive

56
00:01:52,680 --> 00:01:55,000
announcements,
user or developer

57
00:01:55,000 --> 00:01:57,400
support. Our users actually

58
00:01:57,400 --> 00:01:58,440
support each other
through these

59
00:01:58,440 --> 00:02:00,200
mailing lists. Sometimes even

60
00:02:00,200 --> 00:02:02,140
before we get to read
the help requests.

61
00:02:02,935 --> 00:02:04,775
Protege tools are used in all

62
00:02:04,775 --> 00:02:06,635
sorts of settings
in academia,

63
00:02:06,855 --> 00:02:08,715
in industry, and
in government.

64
00:02:09,975 --> 00:02:11,975
With a community
as diverse and

65
00:02:11,975 --> 00:02:14,295
large as a protege
user base and

66
00:02:14,295 --> 00:02:16,455
with protege being
an open source tool,

67
00:02:16,455 --> 00:02:17,995
and it is easily extendable,

68
00:02:18,670 --> 00:02:19,870
This has meant that there have

69
00:02:19,870 --> 00:02:22,190
been numerous
codes and plug in

70
00:02:22,190 --> 00:02:24,510
contributions from
protege users

71
00:02:24,510 --> 00:02:26,050
and from third
party developers

72
00:02:26,510 --> 00:02:27,650
throughout the years.

73
00:02:30,030 --> 00:02:32,110
Web protege shown here in this

74
00:02:32,110 --> 00:02:35,625
figure is a modern web based

75
00:02:35,625 --> 00:02:37,325
ontology editing environment.

76
00:02:37,945 --> 00:02:39,465
Essentially, it
is a Google Docs

77
00:02:39,465 --> 00:02:40,205
for ontologies.

78
00:02:41,225 --> 00:02:43,385
In short, ontologies
are machine

79
00:02:43,385 --> 00:02:45,320
processable artifacts that

80
00:02:45,320 --> 00:02:47,020
represent
the important concepts

81
00:02:47,160 --> 00:02:48,760
and the relationships
that hold

82
00:02:48,760 --> 00:02:50,760
between these concepts in some

83
00:02:50,760 --> 00:02:52,060
domain of discourse.

84
00:02:53,160 --> 00:02:55,260
Web protege is an open
source project.

85
00:02:55,560 --> 00:02:57,960
It is licensed
under the BSD two

86
00:02:57,960 --> 00:02:59,180
clause license,

87
00:02:59,735 --> 00:03:01,675
and it is free for
everyone to use.

88
00:03:02,375 --> 00:03:03,815
The figure here shows the main

89
00:03:03,815 --> 00:03:05,435
Web Protege user interface

90
00:03:05,655 --> 00:03:08,155
displaying the so
called Aero project.

91
00:03:08,855 --> 00:03:10,455
This project bears no relation

92
00:03:10,455 --> 00:03:11,975
to any of the ontologies or

93
00:03:11,975 --> 00:03:13,495
knowledge graphs
that I'll mention

94
00:03:13,495 --> 00:03:16,060
later. It is used here merely

95
00:03:16,060 --> 00:03:17,440
for illustration purposes.

96
00:03:18,300 --> 00:03:19,920
The left hand side
of this figure

97
00:03:20,060 --> 00:03:21,600
displays the class hierarchy

98
00:03:21,900 --> 00:03:24,000
containing various
tagged classes.

99
00:03:24,940 --> 00:03:27,095
The center display displays

100
00:03:27,095 --> 00:03:29,095
the content for
the selected class.

101
00:03:29,095 --> 00:03:30,635
In this case, we have selected

102
00:03:31,015 --> 00:03:33,255
l ten eleven, and this frame

103
00:03:33,255 --> 00:03:35,595
shows us everything
that the ontology

104
00:03:35,735 --> 00:03:37,275
has about this entity.

105
00:03:38,215 --> 00:03:39,675
The right hand side displays

106
00:03:39,735 --> 00:03:41,895
threaded discussions
for the selected

107
00:03:41,895 --> 00:03:44,590
class, and it shows
recent editing

108
00:03:44,590 --> 00:03:46,290
as well as commenting activity

109
00:03:46,430 --> 00:03:47,630
that has occurred throughout

110
00:03:47,630 --> 00:03:48,290
the project.

111
00:03:50,270 --> 00:03:52,110
We provide a hosted
solution for

112
00:03:52,110 --> 00:03:54,430
the community at
webproject dot

113
00:03:54,430 --> 00:03:55,650
stanford dot edu,

114
00:03:55,950 --> 00:03:57,570
where anyone can
create ontology

115
00:03:57,630 --> 00:03:59,205
projects. People just need to

116
00:03:59,205 --> 00:04:01,065
sign up and create
an account.

117
00:04:02,245 --> 00:04:02,965
As of this week,

118
00:04:02,965 --> 00:04:04,665
we have over seventy thousand

119
00:04:04,805 --> 00:04:06,405
registered Web Prodigy users,

120
00:04:06,405 --> 00:04:08,485
and we have just
over a hundred

121
00:04:08,485 --> 00:04:10,245
thousand projects
on this hosted

122
00:04:10,245 --> 00:04:11,465
version of Web Prodigy.

123
00:04:12,570 --> 00:04:14,090
Besides the hosted version,

124
00:04:14,090 --> 00:04:15,770
we produce releases that third

125
00:04:15,770 --> 00:04:18,270
parties can download
and run privately.

126
00:04:18,810 --> 00:04:20,410
This is typically how industry

127
00:04:20,410 --> 00:04:22,670
users such as Cisco
and Pinterest

128
00:04:22,970 --> 00:04:25,310
have deployed Protege
Web Protege site.

129
00:04:27,105 --> 00:04:28,625
Web Protege was designed to

130
00:04:28,625 --> 00:04:30,325
allow users to collaboratively

131
00:04:30,625 --> 00:04:33,685
edit ontologies, much
like Google Docs.

132
00:04:34,225 --> 00:04:35,665
It features various aids for

133
00:04:35,665 --> 00:04:37,265
collaboration, and I'll just

134
00:04:37,265 --> 00:04:39,125
give you a flavor
for these here.

135
00:04:39,550 --> 00:04:40,850
We have change tracking.

136
00:04:41,150 --> 00:04:43,410
Changes are tracked
by user, entity,

137
00:04:43,470 --> 00:04:45,310
and timestamp, and they are

138
00:04:45,310 --> 00:04:46,830
replayable so that they can be

139
00:04:46,830 --> 00:04:48,750
used for
producing intermediate

140
00:04:48,750 --> 00:04:50,430
versions of projects or for

141
00:04:50,430 --> 00:04:52,875
computing diffs or for rolling

142
00:04:52,875 --> 00:04:53,615
back changes.

143
00:04:54,715 --> 00:04:56,075
The tool also provides high

144
00:04:56,075 --> 00:04:57,675
level descriptions
of the changes

145
00:04:57,675 --> 00:04:59,515
that occurred,
which are designed

146
00:04:59,515 --> 00:05:01,035
to make it easier for users to

147
00:05:01,035 --> 00:05:03,115
browse and to
understand the changes

148
00:05:03,115 --> 00:05:04,015
that have happened.

149
00:05:06,520 --> 00:05:08,520
WebRagee provides a simple but

150
00:05:08,520 --> 00:05:10,540
very effective issue
tracking system.

151
00:05:11,080 --> 00:05:13,020
Users can post
discussion threads

152
00:05:13,320 --> 00:05:15,160
per object and
these discussion

153
00:05:15,160 --> 00:05:16,760
threads can be
managed and they

154
00:05:16,760 --> 00:05:18,955
can be resolved
in a way similar

155
00:05:18,955 --> 00:05:20,495
to traditional
issue trackers.

156
00:05:21,275 --> 00:05:23,115
We also have hooks
in the system

157
00:05:23,115 --> 00:05:24,255
for change notifications.

158
00:05:25,435 --> 00:05:27,435
Users can be
notified of changes

159
00:05:27,435 --> 00:05:28,175
to the ontology,

160
00:05:28,555 --> 00:05:30,095
changes to parts
of the ontology,

161
00:05:30,315 --> 00:05:31,295
posted discussions,

162
00:05:31,515 --> 00:05:34,770
etcetera over Slack
and via email.

163
00:05:35,710 --> 00:05:37,970
So that is a very
quick overview

164
00:05:38,110 --> 00:05:39,010
of Web Protege.

165
00:05:39,150 --> 00:05:40,510
Now we'll go into a few more

166
00:05:40,510 --> 00:05:41,490
details later.

167
00:05:42,750 --> 00:05:44,430
The language that Web Protege

168
00:05:44,430 --> 00:05:46,290
works with is called OWL.

169
00:05:46,635 --> 00:05:48,975
That is the Web
Ontology Language.

170
00:05:49,595 --> 00:05:50,955
It is the latest standard in

171
00:05:50,955 --> 00:05:52,655
ontology language languages,

172
00:05:52,795 --> 00:05:54,575
and it is the most
used ontology

173
00:05:54,635 --> 00:05:55,615
language worldwide.

174
00:05:56,635 --> 00:05:58,315
An OWL ontology
is simply a set

175
00:05:58,315 --> 00:06:00,395
of statements,
and we call these

176
00:06:00,395 --> 00:06:01,695
statements axioms.

177
00:06:02,660 --> 00:06:04,180
I'm not going to say much more

178
00:06:04,180 --> 00:06:05,560
else about OWL,

179
00:06:05,780 --> 00:06:07,540
except that
the language itself

180
00:06:07,540 --> 00:06:08,680
is highly expressive,

181
00:06:09,300 --> 00:06:10,820
and it provides a rich set of

182
00:06:10,820 --> 00:06:13,060
primitives and
constructors for

183
00:06:13,060 --> 00:06:14,760
building expressive
ontologies.

184
00:06:16,085 --> 00:06:17,365
And it's a World Wide Web

185
00:06:17,365 --> 00:06:19,285
Consortium standards
with the World

186
00:06:19,285 --> 00:06:20,805
Wide Web Consortium
being the key

187
00:06:20,805 --> 00:06:23,065
standards body for
web technologies

188
00:06:23,205 --> 00:06:25,925
from HTML and CSS through to

189
00:06:25,925 --> 00:06:27,465
knowledge
representation languages

190
00:06:27,525 --> 00:06:29,065
like RDF and OWL.

191
00:06:31,640 --> 00:06:33,400
One of the goals
of Web Protege

192
00:06:33,400 --> 00:06:35,500
is to tame
the complexity of OWL

193
00:06:35,560 --> 00:06:37,480
and the intimidation
factor that

194
00:06:37,480 --> 00:06:39,500
this complexity
brings with it.

195
00:06:39,880 --> 00:06:41,720
To this end, Web
Protege provides

196
00:06:41,720 --> 00:06:43,240
quite a simple user interface

197
00:06:43,240 --> 00:06:44,220
out of the box.

198
00:06:44,965 --> 00:06:46,505
Class descriptions
and individual

199
00:06:46,565 --> 00:06:48,325
descriptions are
simply displayed

200
00:06:48,325 --> 00:06:49,785
as frames of information.

201
00:06:50,965 --> 00:06:52,965
In this slide,
you see the simple

202
00:06:52,965 --> 00:06:54,485
frame based display
of information

203
00:06:54,485 --> 00:06:56,245
in web protege
on the left hand

204
00:06:56,245 --> 00:06:59,045
side and the underlying
OWL code

205
00:06:59,045 --> 00:07:00,345
on the right hand side.

206
00:07:01,100 --> 00:07:02,620
I don't I don't expect you to

207
00:07:02,620 --> 00:07:03,840
read these OWL axioms.

208
00:07:04,300 --> 00:07:05,820
I just want you to notice that

209
00:07:05,820 --> 00:07:07,900
OWL is an expressive ontology

210
00:07:07,900 --> 00:07:09,660
language and that
there is a fair

211
00:07:09,660 --> 00:07:11,680
amount of complexity
under the hoods

212
00:07:11,740 --> 00:07:13,100
that we do our best to shield

213
00:07:13,100 --> 00:07:14,080
our users from.

214
00:07:16,915 --> 00:07:18,435
Historically, the majority of

215
00:07:18,435 --> 00:07:19,715
the funding for the protege

216
00:07:19,715 --> 00:07:21,395
project has come
from the National

217
00:07:21,395 --> 00:07:22,775
Institutes of Health.

218
00:07:23,555 --> 00:07:24,835
We have also received funding

219
00:07:24,835 --> 00:07:26,535
from the National
Cancer Institute

220
00:07:26,675 --> 00:07:28,755
in the US as protege is their

221
00:07:28,755 --> 00:07:30,970
editing platform
for the National

222
00:07:30,970 --> 00:07:33,370
Cancer Institute Thesaurus or

223
00:07:33,370 --> 00:07:35,150
NCI Thesaurus for short.

224
00:07:35,930 --> 00:07:36,970
For a long time,

225
00:07:36,970 --> 00:07:38,750
our primary focus
has therefore

226
00:07:38,810 --> 00:07:40,830
been on supporting
the biomedical

227
00:07:40,890 --> 00:07:42,830
ontology engineering
community.

228
00:07:43,685 --> 00:07:44,965
We've actually led the way in

229
00:07:44,965 --> 00:07:46,505
terms of producing application

230
00:07:46,565 --> 00:07:48,325
oriented ontologies such as

231
00:07:48,325 --> 00:07:50,665
the gene ontology
or the ontology

232
00:07:50,725 --> 00:07:52,165
about chemical entities of

233
00:07:52,165 --> 00:07:55,305
biological interest
or KEBI for short,

234
00:07:55,365 --> 00:07:56,745
among many other ontologies.

235
00:07:57,680 --> 00:07:59,600
However, more recently we have

236
00:07:59,600 --> 00:08:01,280
been seeing more
and more interest

237
00:08:01,280 --> 00:08:03,300
in the use of
Protege for ontology

238
00:08:03,360 --> 00:08:04,980
editing in commercial
settings.

239
00:08:05,680 --> 00:08:07,520
Commercial ontologies
or knowledge

240
00:08:07,520 --> 00:08:09,840
bases which are also known as

241
00:08:09,840 --> 00:08:11,965
knowledge graphs
tend to be much

242
00:08:11,965 --> 00:08:14,465
larger than what we,
the Prolocea team,

243
00:08:14,525 --> 00:08:15,885
have traditionally
been used to

244
00:08:15,885 --> 00:08:16,785
working with.

245
00:08:18,605 --> 00:08:20,205
In recent talks
at the Knowledge

246
00:08:20,205 --> 00:08:21,905
Graph Conference and
the International

247
00:08:22,045 --> 00:08:23,185
Semantic Web Conference,

248
00:08:23,485 --> 00:08:24,705
I described the collaboration

249
00:08:24,765 --> 00:08:27,130
between our group
and Pinterest

250
00:08:27,190 --> 00:08:28,870
on building on
an ontology that

251
00:08:28,870 --> 00:08:30,630
forms the core
of the Pinterest

252
00:08:30,630 --> 00:08:31,450
knowledge graph.

253
00:08:32,070 --> 00:08:33,590
I won't go into detail here

254
00:08:33,590 --> 00:08:35,350
about the engineering
of the Pinterest

255
00:08:35,350 --> 00:08:36,470
graph, but instead,

256
00:08:36,470 --> 00:08:38,230
I'll briefly describe the Web

257
00:08:38,230 --> 00:08:39,930
Project features
that we developed

258
00:08:40,195 --> 00:08:41,655
to improve its construction,

259
00:08:41,955 --> 00:08:43,255
maintenance, and curation.

260
00:08:44,435 --> 00:08:46,115
After that, I'll
describe the kinds

261
00:08:46,115 --> 00:08:47,635
of functionality
that we've been

262
00:08:47,635 --> 00:08:50,055
building in WebRTC
to facilitate

263
00:08:50,195 --> 00:08:51,895
the engineering
of the Elsevier

264
00:08:52,275 --> 00:08:54,580
medical knowledge graph and of

265
00:08:54,580 --> 00:08:57,320
the BASF chemical
knowledge graph.

266
00:08:59,780 --> 00:09:01,380
A feature that
has been heavily

267
00:09:01,380 --> 00:09:03,460
used in the development
of the Pinterest

268
00:09:03,460 --> 00:09:05,720
ontology is called
entity tags.

269
00:09:06,565 --> 00:09:07,765
These tags can be used to

270
00:09:07,765 --> 00:09:09,605
highlight entities
in a colorful

271
00:09:09,605 --> 00:09:12,025
way in the WebRagee
user interface.

272
00:09:12,965 --> 00:09:14,745
Each tag is assigned a label,

273
00:09:14,805 --> 00:09:17,145
an optional description,
and a color,

274
00:09:17,285 --> 00:09:19,145
as you can see here
in this screenshot.

275
00:09:20,250 --> 00:09:22,010
These tags can then either be

276
00:09:22,010 --> 00:09:23,790
manually assigned to entities

277
00:09:24,330 --> 00:09:25,870
or they can be automatically

278
00:09:26,170 --> 00:09:29,710
assigned in an, live
query based way.

279
00:09:32,505 --> 00:09:34,345
Tags can be
automatically assigned

280
00:09:34,345 --> 00:09:36,665
to entities in
an ontology based

281
00:09:36,665 --> 00:09:39,065
on structural criteria as I'm

282
00:09:39,065 --> 00:09:40,685
depicting here
in this figure.

283
00:09:41,225 --> 00:09:43,165
This tagging feature
supports complex,

284
00:09:43,625 --> 00:09:44,685
multiple conjunctive,

285
00:09:44,745 --> 00:09:47,090
and disjunctive criteria along

286
00:09:47,090 --> 00:09:49,430
with paths of values
to be matched.

287
00:09:50,210 --> 00:09:51,490
Here the automated tagging

288
00:09:51,490 --> 00:09:53,010
criteria specify that any

289
00:09:53,010 --> 00:09:55,030
subclasses of Airbus aircraft

290
00:09:55,410 --> 00:09:57,170
that are missing a value for

291
00:09:57,170 --> 00:09:59,735
SCUS definition will be tagged

292
00:09:59,735 --> 00:10:01,915
with a tag called
missing definition.

293
00:10:04,855 --> 00:10:06,375
It is then possible to search

294
00:10:06,375 --> 00:10:07,575
for entities that have been

295
00:10:07,575 --> 00:10:09,415
tagged with a specific tag or

296
00:10:09,415 --> 00:10:10,635
with multiple tags.

297
00:10:11,110 --> 00:10:13,050
This can be done
using the traditional

298
00:10:13,110 --> 00:10:14,730
search feature in the WebRTC

299
00:10:14,790 --> 00:10:16,550
tool by typing the tag name in

300
00:10:16,550 --> 00:10:17,930
the search text field.

301
00:10:19,910 --> 00:10:21,190
The entity tags feature was

302
00:10:21,190 --> 00:10:22,950
adopted by other users fairly

303
00:10:22,950 --> 00:10:24,630
quickly and this screenshot is

304
00:10:24,630 --> 00:10:25,615
an example of that.

305
00:10:26,175 --> 00:10:28,095
I'm showing here
a public ontology

306
00:10:28,095 --> 00:10:29,795
developed by Highways England

307
00:10:29,935 --> 00:10:30,975
which is currently maintained

308
00:10:30,975 --> 00:10:31,875
in Web Prodigy.

309
00:10:32,495 --> 00:10:33,775
As you can see the ontology

310
00:10:33,775 --> 00:10:35,215
developers have made extensive

311
00:10:35,215 --> 00:10:36,895
use of entity tags throughout

312
00:10:36,895 --> 00:10:37,555
the ontology.

313
00:10:38,570 --> 00:10:40,970
Note also that
the tags are not

314
00:10:40,970 --> 00:10:42,170
only displayed in the class

315
00:10:42,170 --> 00:10:43,450
hierarchy in
the left hand side

316
00:10:43,450 --> 00:10:44,590
of the user interface,

317
00:10:45,050 --> 00:10:46,570
but they're also displayed at

318
00:10:46,570 --> 00:10:48,890
the top of the entity
description view,

319
00:10:48,890 --> 00:10:50,250
which is shown
here on the right

320
00:10:50,250 --> 00:10:51,470
hand side of the figure.

321
00:10:54,205 --> 00:10:55,485
Another key feature that was

322
00:10:55,485 --> 00:10:57,025
essential for
Pinterest curators

323
00:10:57,085 --> 00:10:59,105
was having support
for multiple

324
00:10:59,165 --> 00:11:01,025
languages in
the user interface.

325
00:11:01,405 --> 00:11:02,845
In particular,
it was essential

326
00:11:02,845 --> 00:11:05,025
to display entity
names in a secondary

327
00:11:05,085 --> 00:11:06,845
language across the class

328
00:11:06,845 --> 00:11:09,005
hierarchy as depicted in this

329
00:11:09,005 --> 00:11:10,740
screenshot. Here,

330
00:11:10,740 --> 00:11:12,420
the primary display
language is

331
00:11:12,420 --> 00:11:14,340
English and
the secondary display

332
00:11:14,340 --> 00:11:15,480
language is Hungarian.

333
00:11:16,420 --> 00:11:18,260
The secondary display name is

334
00:11:18,260 --> 00:11:20,020
shown to the right
of the primary

335
00:11:20,020 --> 00:11:20,920
display name.

336
00:11:21,905 --> 00:11:23,265
The colorful tag that you see

337
00:11:23,265 --> 00:11:26,705
in the UI with hu highlights

338
00:11:26,705 --> 00:11:28,405
the classes that are
missing a Hungarian

339
00:11:28,625 --> 00:11:31,345
label. So one way or another,

340
00:11:31,345 --> 00:11:32,865
entities that are
missing labels

341
00:11:32,865 --> 00:11:35,125
can be easily identified
in my protege.

342
00:11:37,570 --> 00:11:39,010
Finally, during
our collaboration

343
00:11:39,010 --> 00:11:39,750
with Pinterest,

344
00:11:39,970 --> 00:11:41,590
we built a querying mechanism

345
00:11:41,810 --> 00:11:43,510
and the user interface,

346
00:11:44,210 --> 00:11:45,970
which caters to
the most common

347
00:11:45,970 --> 00:11:47,410
kinds of queries that users

348
00:11:47,410 --> 00:11:48,550
perform in ontologies.

349
00:11:49,330 --> 00:11:50,210
In this screenshot,

350
00:11:50,210 --> 00:11:51,670
we are searching
for subclasses

351
00:11:51,730 --> 00:11:53,905
of Airbus aircraft
that contain

352
00:11:53,965 --> 00:11:55,885
the string passenger in their

353
00:11:55,885 --> 00:11:57,965
labels and
the results are shown

354
00:11:57,965 --> 00:11:59,585
at the bottom of this figure.

355
00:12:00,365 --> 00:12:01,805
The expressivity
of the queries

356
00:12:01,805 --> 00:12:03,245
that can be done here comes

357
00:12:03,245 --> 00:12:05,085
close to a shackle core

358
00:12:05,085 --> 00:12:07,565
implementation
disguised in a user

359
00:12:07,565 --> 00:12:08,800
friendly form.

360
00:12:11,600 --> 00:12:12,480
About a year ago,

361
00:12:12,480 --> 00:12:14,180
we released this
graph visualization

362
00:12:14,560 --> 00:12:16,980
interface shown in
this figure here.

363
00:12:17,360 --> 00:12:19,460
The graph displays all
of the relationships

364
00:12:19,680 --> 00:12:21,060
that a selected entity,

365
00:12:21,200 --> 00:12:23,060
in this case
the Airbus aircraft

366
00:12:23,120 --> 00:12:25,985
A350 is the subject of.

367
00:12:26,765 --> 00:12:28,285
Subclass of relationships are

368
00:12:28,285 --> 00:12:29,825
shown in solid yellow,

369
00:12:29,885 --> 00:12:31,405
while custom relationships are

370
00:12:31,405 --> 00:12:33,405
shown in blue,
such as the primary

371
00:12:33,405 --> 00:12:35,425
manufacturer of
Airbus aircraft.

372
00:12:36,540 --> 00:12:38,220
When exploring
tools to edit and

373
00:12:38,220 --> 00:12:40,160
to curate the Elsevier medical

374
00:12:40,220 --> 00:12:41,120
knowledge graph,

375
00:12:41,260 --> 00:12:43,100
Web Protege came
up as a natural

376
00:12:43,100 --> 00:12:45,340
candidate. This feature in

377
00:12:45,340 --> 00:12:46,700
particular was of interest to

378
00:12:46,700 --> 00:12:49,020
the Elsevier team
as it provides

379
00:12:49,020 --> 00:12:50,860
a useful bird's eye view of

380
00:12:50,860 --> 00:12:52,595
the relationships
that hold for

381
00:12:52,595 --> 00:12:54,355
a particular entity without

382
00:12:54,355 --> 00:12:55,795
overwhelming the user too much

383
00:12:55,795 --> 00:12:57,975
with information from
other entities.

384
00:13:00,915 --> 00:13:02,355
Because of the enormous amount

385
00:13:02,355 --> 00:13:04,195
of relationships that a given

386
00:13:04,195 --> 00:13:05,815
entity can be involved in,

387
00:13:06,020 --> 00:13:07,300
the graph visualization can

388
00:13:07,300 --> 00:13:08,900
become difficult to browse and

389
00:13:08,900 --> 00:13:10,980
to navigate, in particular for

390
00:13:10,980 --> 00:13:12,660
extremely large ontologies or

391
00:13:12,660 --> 00:13:13,480
knowledge graphs.

392
00:13:14,100 --> 00:13:15,960
So in collaboration
with Elsevier,

393
00:13:16,180 --> 00:13:17,560
we have developed a mechanism

394
00:13:17,620 --> 00:13:19,540
to specify and
to apply filters

395
00:13:19,540 --> 00:13:20,520
to the graph visualization.

396
00:13:21,735 --> 00:13:23,435
Each filter has a name,

397
00:13:23,815 --> 00:13:25,655
a status that is whether it is

398
00:13:25,655 --> 00:13:27,835
active or not
from the get go,

399
00:13:28,695 --> 00:13:30,615
an optional description and

400
00:13:30,615 --> 00:13:32,855
definitions of
what edges should

401
00:13:32,855 --> 00:13:34,455
or should not be included in

402
00:13:34,455 --> 00:13:35,035
the visualization.

403
00:13:36,190 --> 00:13:38,190
We can add multiple
criteria for

404
00:13:38,190 --> 00:13:40,190
inclusion or
exclusion of content

405
00:13:40,190 --> 00:13:42,290
in the graph. For example,

406
00:13:42,350 --> 00:13:44,850
here we have two filters
in this figure.

407
00:13:44,990 --> 00:13:46,450
The first filter specifies

408
00:13:46,590 --> 00:13:48,930
inclusion of subclass of edges

409
00:13:49,605 --> 00:13:51,705
and exclusion of edges where

410
00:13:51,925 --> 00:13:54,565
the head node is deprecated or

411
00:13:54,565 --> 00:13:55,845
where the tail node does not

412
00:13:55,845 --> 00:13:57,145
have a label on it.

413
00:13:57,365 --> 00:13:58,505
These were just examples.

414
00:13:59,045 --> 00:14:00,505
The second filter specifies

415
00:14:00,645 --> 00:14:02,325
inclusion of edges
where the edge

416
00:14:02,325 --> 00:14:04,425
property is engine
configuration.

417
00:14:07,420 --> 00:14:08,560
Applying these filters,

418
00:14:09,500 --> 00:14:11,040
just described to
the visualization

419
00:14:11,260 --> 00:14:12,880
shown in the earlier slides,

420
00:14:13,340 --> 00:14:15,600
we get the graph
in this figure.

421
00:14:16,140 --> 00:14:17,840
Notice that
the applied filters

422
00:14:17,900 --> 00:14:19,180
are listed at the bottom of

423
00:14:19,180 --> 00:14:21,125
the user interface and we can

424
00:14:21,125 --> 00:14:23,305
add or remove these filters

425
00:14:23,365 --> 00:14:25,605
quite easily. Finally,

426
00:14:25,605 --> 00:14:27,605
it is possible to
export the content

427
00:14:27,605 --> 00:14:29,365
of the graph
visualization from

428
00:14:29,365 --> 00:14:31,705
Web Protege in
the form of an SVG

429
00:14:31,845 --> 00:14:33,145
vector image file.

430
00:14:34,600 --> 00:14:36,040
Now all the functionality that

431
00:14:36,040 --> 00:14:37,720
I've mentioned up until now is

432
00:14:37,720 --> 00:14:39,320
included in a live version of

433
00:14:39,320 --> 00:14:41,640
Web Produce. So if you
log on to it now,

434
00:14:41,640 --> 00:14:43,100
you will see all of this.

435
00:14:43,400 --> 00:14:44,840
Now the work that
I'll describe

436
00:14:44,840 --> 00:14:46,360
next will are
features that are

437
00:14:46,360 --> 00:14:48,205
under development currently.

438
00:14:48,205 --> 00:14:50,045
And so you won't see
them straight away,

439
00:14:50,045 --> 00:14:51,985
but they will appear
in the future.

440
00:14:54,445 --> 00:14:55,985
Beyond the standard editing

441
00:14:56,125 --> 00:14:57,585
interface in Web Protege,

442
00:14:57,885 --> 00:14:59,265
we have been
building functionality

443
00:14:59,405 --> 00:15:01,085
that makes it
possible to create

444
00:15:01,085 --> 00:15:03,250
forms for viewing
and for editing

445
00:15:03,250 --> 00:15:04,550
entities in an ontology.

446
00:15:05,410 --> 00:15:06,690
We've been doing this work in

447
00:15:06,690 --> 00:15:08,150
collaboration with Elsevier.

448
00:15:08,450 --> 00:15:09,970
We use these forms for subject

449
00:15:09,970 --> 00:15:11,970
matter experts to view and to

450
00:15:11,970 --> 00:15:13,590
curate content in the graph.

451
00:15:14,455 --> 00:15:16,535
We can add customizable form

452
00:15:16,535 --> 00:15:18,615
based presentations and simple

453
00:15:18,615 --> 00:15:20,635
visualizations that provide

454
00:15:20,855 --> 00:15:22,635
controlled knowledge entry.

455
00:15:23,335 --> 00:15:24,875
They also provide an efficient

456
00:15:25,095 --> 00:15:26,695
and pleasing way to browse

457
00:15:26,695 --> 00:15:29,460
ontologies for
both experts and

458
00:15:29,460 --> 00:15:31,320
unexperienced users alike.

459
00:15:32,420 --> 00:15:34,500
Forms are displayed
upon the selection

460
00:15:34,500 --> 00:15:36,660
of entities that
match specific

461
00:15:36,660 --> 00:15:38,900
criteria similar
to the way that

462
00:15:38,900 --> 00:15:41,000
entity tags can be
assigned to entities.

463
00:15:42,285 --> 00:15:44,205
The form here displays an easy

464
00:15:44,205 --> 00:15:46,145
to view and to
edit presentation

465
00:15:46,605 --> 00:15:48,205
of the logical description of

466
00:15:48,205 --> 00:15:49,185
selected classes.

467
00:15:49,485 --> 00:15:51,485
In this case, the amino acid

468
00:15:51,485 --> 00:15:53,485
alanine from an ontology about

469
00:15:53,485 --> 00:15:54,385
amino acids.

470
00:15:56,960 --> 00:15:58,320
In this and the next slides,

471
00:15:58,320 --> 00:15:59,700
I'm briefly going
to demonstrate

472
00:15:59,840 --> 00:16:01,920
the creation of the amino acid

473
00:16:01,920 --> 00:16:03,700
form that I just
showed you before.

474
00:16:04,400 --> 00:16:05,280
So in this form,

475
00:16:05,280 --> 00:16:06,800
we start by defining a field

476
00:16:06,800 --> 00:16:08,000
that represents the name of

477
00:16:08,000 --> 00:16:09,840
the object with
a default language

478
00:16:09,840 --> 00:16:11,935
English. It's possible to add

479
00:16:11,935 --> 00:16:14,115
some optional help
text to each field.

480
00:16:14,815 --> 00:16:16,575
We then specify how the value

481
00:16:16,575 --> 00:16:18,995
for this field binds
into the ontology.

482
00:16:19,375 --> 00:16:20,815
In this case, we define that

483
00:16:20,815 --> 00:16:22,515
the value will become
a relationship

484
00:16:22,655 --> 00:16:24,515
value of the selected
subject.

485
00:16:25,200 --> 00:16:26,640
Remember that a specific form

486
00:16:26,640 --> 00:16:28,240
gets activated when we select

487
00:16:28,240 --> 00:16:30,180
an entity that
triggers that form,

488
00:16:30,240 --> 00:16:31,840
and that this entity
is the subject

489
00:16:31,840 --> 00:16:34,080
of the relationships
defined in

490
00:16:34,080 --> 00:16:36,660
the form unless we
otherwise state it.

491
00:16:37,405 --> 00:16:38,765
Other options here would be to

492
00:16:38,765 --> 00:16:40,445
bind acquired information to

493
00:16:40,445 --> 00:16:42,765
the parents, to
instances or to

494
00:16:42,765 --> 00:16:44,625
subclasses of
the selected entity.

495
00:16:45,805 --> 00:16:47,725
We can specify common form

496
00:16:47,725 --> 00:16:49,345
settings such as optionality,

497
00:16:49,885 --> 00:16:51,085
that is whether the field is

498
00:16:51,085 --> 00:16:53,400
required or optional
and repeatability,

499
00:16:53,860 --> 00:16:55,540
that is whether
the field appears

500
00:16:55,540 --> 00:16:57,960
only once or multiple
times in the form.

501
00:16:58,660 --> 00:17:00,180
Then we can choose
what happens

502
00:17:00,180 --> 00:17:02,200
if the selected entity
gets deprecated,

503
00:17:02,900 --> 00:17:04,020
how the form fields,

504
00:17:04,340 --> 00:17:05,780
will get displayed in the form

505
00:17:05,780 --> 00:17:07,495
interface, And finally,

506
00:17:07,495 --> 00:17:09,835
what kind of form
field this is.

507
00:17:10,135 --> 00:17:12,055
In our case, this
is just a simple

508
00:17:12,055 --> 00:17:12,875
text field.

509
00:17:14,855 --> 00:17:16,295
In this portion of the form,

510
00:17:16,295 --> 00:17:18,875
we are creating
the charge form field.

511
00:17:19,450 --> 00:17:20,890
Remember that this field only

512
00:17:20,890 --> 00:17:23,470
has three possible
values negative,

513
00:17:23,690 --> 00:17:24,990
neutral, or positive.

514
00:17:26,090 --> 00:17:27,690
First, the input
value for this

515
00:17:27,690 --> 00:17:30,010
field is specified to bind to

516
00:17:30,010 --> 00:17:31,790
the hasCharge property.

517
00:17:32,755 --> 00:17:34,435
This means that
the input value

518
00:17:34,435 --> 00:17:36,115
will become the filler or in

519
00:17:36,115 --> 00:17:36,855
other words,

520
00:17:36,915 --> 00:17:39,735
the object of a hasCharge
relationship.

521
00:17:41,235 --> 00:17:42,755
The other major
difference between

522
00:17:42,755 --> 00:17:44,435
this field and
the previous one

523
00:17:44,435 --> 00:17:46,595
is that this is
specified as a single

524
00:17:46,595 --> 00:17:47,975
choice type field,

525
00:17:48,420 --> 00:17:50,120
which gets displayed
in the interface

526
00:17:50,180 --> 00:17:52,280
as a segmented radio button.

527
00:17:53,060 --> 00:17:54,660
The possible options
for the form

528
00:17:54,660 --> 00:17:57,320
field can be specified
to be a fixed

529
00:17:57,380 --> 00:17:59,860
set of values or they can be

530
00:17:59,860 --> 00:18:01,745
drawn from the existing values

531
00:18:01,745 --> 00:18:05,045
in ontology in a dynamic way.

532
00:18:05,345 --> 00:18:06,965
In this case, we
are specifying

533
00:18:07,025 --> 00:18:08,385
that the possible options for

534
00:18:08,385 --> 00:18:10,405
the charge field
are the subclasses

535
00:18:10,545 --> 00:18:12,725
of the charge class
in this ontology.

536
00:18:13,600 --> 00:18:15,060
So the options are dynamically

537
00:18:15,200 --> 00:18:17,140
populated from
ontology content.

538
00:18:19,280 --> 00:18:21,120
After we specify
the other fields

539
00:18:21,120 --> 00:18:22,880
to acquire
the information that

540
00:18:22,880 --> 00:18:25,220
is intended to define an amino

541
00:18:25,440 --> 00:18:27,735
acids we end up
with a complete

542
00:18:27,735 --> 00:18:28,775
amino acid form,

543
00:18:28,775 --> 00:18:30,475
which I'm showing
you here again

544
00:18:30,695 --> 00:18:32,955
in the middle, view
of the WebProtein

545
00:18:33,175 --> 00:18:33,915
user interface.

546
00:18:35,575 --> 00:18:37,335
And so this wraps up the core

547
00:18:37,335 --> 00:18:38,535
of the work that we have been

548
00:18:38,535 --> 00:18:40,715
doing in collaboration
with Elsevier.

549
00:18:43,690 --> 00:18:45,310
The next and
last collaboration

550
00:18:45,370 --> 00:18:47,310
I'll mention is with BASF,

551
00:18:47,850 --> 00:18:49,530
the largest chemical producer

552
00:18:49,530 --> 00:18:50,350
in the world.

553
00:18:51,850 --> 00:18:53,390
The National Cancer Institute

554
00:18:53,450 --> 00:18:55,130
disorders is an ontology that

555
00:18:55,130 --> 00:18:57,615
we would traditionally
call large.

556
00:18:57,995 --> 00:18:59,835
It contains over
two and a half

557
00:18:59,835 --> 00:19:02,255
million axioms that describe

558
00:19:02,315 --> 00:19:03,835
over a hundred and fifty seven

559
00:19:03,835 --> 00:19:04,815
thousand classes.

560
00:19:06,155 --> 00:19:07,915
Now when we come to the BASF

561
00:19:07,915 --> 00:19:08,895
chemistry ontology,

562
00:19:09,355 --> 00:19:11,050
it is in a league of its own.

563
00:19:11,610 --> 00:19:12,750
Out of all the enterprise

564
00:19:12,810 --> 00:19:14,490
ontologies that we have seen,

565
00:19:14,490 --> 00:19:17,070
the BSF chemistry ontology is

566
00:19:17,130 --> 00:19:18,350
by far the largest.

567
00:19:18,890 --> 00:19:19,850
From our point of view,

568
00:19:19,850 --> 00:19:21,790
it is tremendously large.

569
00:19:22,410 --> 00:19:24,730
It contains over seven hundred

570
00:19:24,730 --> 00:19:25,950
million axioms.

571
00:19:26,665 --> 00:19:28,205
That's seven hundred million

572
00:19:28,265 --> 00:19:30,905
axioms that describe
over thirty

573
00:19:30,905 --> 00:19:31,965
million classes.

574
00:19:33,065 --> 00:19:35,085
So what this means
is that the BASF

575
00:19:35,145 --> 00:19:37,385
ontology is three orders of

576
00:19:37,385 --> 00:19:39,145
magnitude larger in terms of

577
00:19:39,145 --> 00:19:42,000
axioms than what
Webproject was

578
00:19:42,000 --> 00:19:43,540
originally designed for.

579
00:19:44,080 --> 00:19:46,180
So the challenge is on.

580
00:19:47,120 --> 00:19:49,680
The good news is
that BASF have

581
00:19:49,680 --> 00:19:51,920
successfully used Neo4j for

582
00:19:51,920 --> 00:19:53,380
holding the chemistry
ontology.

583
00:19:54,495 --> 00:19:56,495
So we proceeded down the route

584
00:19:56,495 --> 00:19:58,335
of re engineering web protege

585
00:19:58,335 --> 00:20:00,275
so that it can
interface with Neo4j.

586
00:20:01,535 --> 00:20:03,155
Now to to achieve this,

587
00:20:03,375 --> 00:20:05,875
we set out to design a mapping

588
00:20:06,340 --> 00:20:08,200
between the web
ontology language,

589
00:20:08,260 --> 00:20:10,740
OWL, and labeled
property graphs

590
00:20:10,740 --> 00:20:11,960
supported by Neo4j.

591
00:20:12,980 --> 00:20:14,420
We also produced a software

592
00:20:14,420 --> 00:20:16,500
library that allows
us and other

593
00:20:16,500 --> 00:20:18,440
people to extract, transform,

594
00:20:18,580 --> 00:20:20,420
and to load ontologies into

595
00:20:20,420 --> 00:20:21,415
Neo4j graphs.

596
00:20:22,135 --> 00:20:23,655
And this library
also allows us

597
00:20:23,655 --> 00:20:25,095
to view and to manipulate

598
00:20:25,095 --> 00:20:27,335
manipulate Neo4j
graphs through

599
00:20:27,335 --> 00:20:28,715
the lens of ontologies.

600
00:20:30,375 --> 00:20:32,235
Now, although we
have used Neo4j

601
00:20:32,455 --> 00:20:34,715
as a backend technology
in this project,

602
00:20:35,390 --> 00:20:36,750
the architecture that we built

603
00:20:36,750 --> 00:20:38,930
into Web Protege
is very flexible.

604
00:20:39,310 --> 00:20:40,210
So in principle,

605
00:20:40,270 --> 00:20:42,030
Web Protege can
be made to work

606
00:20:42,030 --> 00:20:44,290
with any backend
graph database.

607
00:20:47,475 --> 00:20:49,175
We have designed
and implemented

608
00:20:49,395 --> 00:20:51,095
the very first comprehensive

609
00:20:51,395 --> 00:20:53,395
mapping between ontologies and

610
00:20:53,395 --> 00:20:54,695
Neo4j graphs.

611
00:20:55,395 --> 00:20:57,015
This allows us to
store arbitrary

612
00:20:57,075 --> 00:20:58,455
ontologies in Neo4j.

613
00:20:59,555 --> 00:21:00,855
Our approach to representing

614
00:21:00,915 --> 00:21:02,915
ontologies in Neo4j knowledge

615
00:21:02,915 --> 00:21:04,770
graphs means that
we can capture

616
00:21:04,990 --> 00:21:06,590
anything that can be expressed

617
00:21:06,590 --> 00:21:07,970
in the L2 language.

618
00:21:08,430 --> 00:21:09,710
It's a clean and uniform

619
00:21:09,710 --> 00:21:11,310
representation that is easy to

620
00:21:11,310 --> 00:21:13,890
query and it's
also bidirectional

621
00:21:14,270 --> 00:21:16,110
mapping so that we can round

622
00:21:16,110 --> 00:21:18,110
trip ontologies to and from

623
00:21:18,110 --> 00:21:20,805
Neo4j graphs without any loss

624
00:21:20,805 --> 00:21:21,545
of information.

625
00:21:22,565 --> 00:21:23,925
I'd like to note that while

626
00:21:23,925 --> 00:21:25,705
there have been
previous efforts

627
00:21:26,085 --> 00:21:27,685
at representing ontologies in

628
00:21:27,685 --> 00:21:30,085
Neo4j graphs or
labeled property

629
00:21:30,085 --> 00:21:31,065
graphs in general,

630
00:21:31,365 --> 00:21:32,965
these efforts have
been somewhat

631
00:21:32,965 --> 00:21:35,160
narrowly focused and they are

632
00:21:35,160 --> 00:21:37,080
either severely
limited in what

633
00:21:37,080 --> 00:21:38,060
can be expressed,

634
00:21:38,280 --> 00:21:39,400
in other words they are not

635
00:21:39,400 --> 00:21:41,020
complete for
the OWL language,

636
00:21:41,640 --> 00:21:43,660
or they're single
directional mappings,

637
00:21:43,720 --> 00:21:45,240
meaning that ontologies cannot

638
00:21:45,240 --> 00:21:46,840
be round tripped
from the labeled

639
00:21:46,840 --> 00:21:47,980
property graph format,

640
00:21:48,585 --> 00:21:50,265
or these
representations are at

641
00:21:50,265 --> 00:21:51,805
the wrong level
of abstraction,

642
00:21:51,945 --> 00:21:53,405
meaning that they would be

643
00:21:53,625 --> 00:21:55,885
extremely verbose
and hard to manage.

644
00:21:57,145 --> 00:21:59,085
We then re engineered
Web Prodge

645
00:21:59,305 --> 00:22:00,985
so that it can interface with

646
00:22:00,985 --> 00:22:02,850
Neo four j, and this gives us

647
00:22:02,850 --> 00:22:04,690
the ability to display and to

648
00:22:04,690 --> 00:22:06,690
edit extremely large knowledge

649
00:22:06,690 --> 00:22:08,150
graphs in Web Protege.

650
00:22:10,850 --> 00:22:12,450
I'll say again
that the chemistry

651
00:22:12,450 --> 00:22:14,850
ontology developed by DSF is

652
00:22:14,850 --> 00:22:17,255
three orders of
magnitude larger

653
00:22:17,255 --> 00:22:18,455
than anything that
we have dealt

654
00:22:18,455 --> 00:22:19,275
with before.

655
00:22:20,455 --> 00:22:21,675
Our initial investigations

656
00:22:21,975 --> 00:22:24,215
indicate that Neo4j can handle

657
00:22:24,215 --> 00:22:25,895
the chemical ontology with our

658
00:22:25,895 --> 00:22:26,795
chosen representation.

659
00:22:27,655 --> 00:22:29,115
And we note that Web Produce

660
00:22:29,415 --> 00:22:32,760
with Neo4j backing
it is responsive

661
00:22:32,820 --> 00:22:34,420
enough for browsing and for

662
00:22:34,420 --> 00:22:36,680
editing an ontology
of this size.

663
00:22:37,540 --> 00:22:39,860
Finally, although
we have focused

664
00:22:39,860 --> 00:22:41,140
on Neo4j graphs,

665
00:22:41,140 --> 00:22:42,580
the representation
that we came

666
00:22:42,580 --> 00:22:44,680
up with is not
specific to Neo4j.

667
00:22:45,265 --> 00:22:46,945
It would work in
any store that

668
00:22:46,945 --> 00:22:48,705
is capable of
supporting labeled

669
00:22:48,705 --> 00:22:50,085
par property graphs.

670
00:22:50,865 --> 00:22:52,225
The main point here is that we

671
00:22:52,225 --> 00:22:54,865
can now map OWL
ontologies into

672
00:22:54,865 --> 00:22:56,165
labeled property graphs,

673
00:22:56,385 --> 00:22:58,385
and Web4j can be made to work

674
00:22:58,385 --> 00:23:00,005
with a back end
graph database.

675
00:23:03,280 --> 00:23:04,800
To wrap up, I'll now give you

676
00:23:04,800 --> 00:23:06,000
a glimpse of what we've got

677
00:23:06,000 --> 00:23:07,300
planned for next year.

678
00:23:07,520 --> 00:23:08,880
First off, we plan to release

679
00:23:08,880 --> 00:23:10,560
the customizable forms feature

680
00:23:10,560 --> 00:23:11,300
that I discussed.

681
00:23:12,240 --> 00:23:14,260
Next, we hope to
support identity

682
00:23:14,400 --> 00:23:16,775
management using
Keycloak so we

683
00:23:16,775 --> 00:23:18,695
can allow common
single sign on

684
00:23:18,695 --> 00:23:20,395
options such as
Google accounts.

685
00:23:20,935 --> 00:23:22,615
We then plan to
implement support

686
00:23:22,615 --> 00:23:24,935
in the WebRTC
user interface as

687
00:23:24,935 --> 00:23:27,675
well as APIs to
support curation,

688
00:23:28,055 --> 00:23:30,235
reviewing, and issue
tracking workflows.

689
00:23:31,240 --> 00:23:32,760
A last feature that
gets requested

690
00:23:32,760 --> 00:23:34,680
a lot is finer grained user

691
00:23:34,680 --> 00:23:35,580
access control.

692
00:23:35,960 --> 00:23:37,400
So we plan to provide support

693
00:23:37,400 --> 00:23:39,400
for customizing user roles and

694
00:23:39,400 --> 00:23:40,860
to tie those into specific

695
00:23:40,920 --> 00:23:42,060
ontology operations.

696
00:23:43,305 --> 00:23:45,165
Finally, as we gain
more experience

697
00:23:45,225 --> 00:23:47,005
with editing
enormous ontologies

698
00:23:47,225 --> 00:23:48,045
in Web Protege,

699
00:23:48,585 --> 00:23:50,025
we expect to implement major

700
00:23:50,025 --> 00:23:51,805
enhancements to
the user interface

701
00:23:52,025 --> 00:23:53,565
to accommodate
the visualization

702
00:23:53,945 --> 00:23:55,945
and management of content of

703
00:23:55,945 --> 00:23:56,765
such magnitude.

704
00:23:58,590 --> 00:23:59,710
And with that, I would like to

705
00:23:59,710 --> 00:24:01,390
thank the organizers
for having me,

706
00:24:01,390 --> 00:24:04,930
and I'll take any
questions. Thank you.

707
00:24:13,705 --> 00:24:15,465
What what can you
do in Prodigi

708
00:24:15,465 --> 00:24:17,145
Desktop that is
not possible in

709
00:24:17,145 --> 00:24:19,245
Web Prodigi and, vice versa?

710
00:24:20,310 --> 00:24:21,530
That's a great question.

711
00:24:22,070 --> 00:24:24,490
So Protege Desktop
was designed

712
00:24:24,550 --> 00:24:26,710
as a expert system
where you can

713
00:24:26,710 --> 00:24:28,870
do pretty much
anything that you

714
00:24:28,870 --> 00:24:30,170
might think of
with ontologies.

715
00:24:31,110 --> 00:24:32,890
And that includes
in particular

716
00:24:32,950 --> 00:24:36,365
reasoning. Protege has protege

717
00:24:36,365 --> 00:24:37,965
desktop has by
default reasoning

718
00:24:37,965 --> 00:24:39,965
support, and it
has this plugin

719
00:24:39,965 --> 00:24:41,345
architecture that has allowed

720
00:24:41,725 --> 00:24:43,965
other developers
to to build and

721
00:24:43,965 --> 00:24:45,965
to contribute
reasoners that can

722
00:24:45,965 --> 00:24:48,785
be used, within
protege desktop.

723
00:24:49,960 --> 00:24:51,640
We also have
different querying

724
00:24:51,640 --> 00:24:53,900
mechanisms in in
the desktop version.

725
00:24:54,600 --> 00:24:56,440
And as a and we've also got

726
00:24:56,440 --> 00:24:58,360
justification systems that,

727
00:24:58,680 --> 00:25:01,880
allow you to ask
why is it that

728
00:25:01,880 --> 00:25:05,585
the particular axiom
holds or is true.

729
00:25:06,285 --> 00:25:07,965
And and these features are not

730
00:25:07,965 --> 00:25:09,825
in the web version
of of protege.

731
00:25:10,365 --> 00:25:12,365
So web protege
does not currently

732
00:25:12,365 --> 00:25:13,585
have reasoning support,

733
00:25:14,285 --> 00:25:16,845
and the querying capability is

734
00:25:16,845 --> 00:25:18,125
that which I've shown you here

735
00:25:18,125 --> 00:25:18,945
in this presentation.

736
00:25:19,950 --> 00:25:21,550
Now Web Protege
does have a lot

737
00:25:21,550 --> 00:25:23,150
of other things
that the desktop

738
00:25:23,150 --> 00:25:24,350
version doesn't have.

739
00:25:24,350 --> 00:25:25,790
And this is very
much what you've

740
00:25:25,790 --> 00:25:26,770
seen in this presentation.

741
00:25:26,830 --> 00:25:29,150
So the tagging
system is not in

742
00:25:29,150 --> 00:25:30,130
the desktop version.

743
00:25:30,750 --> 00:25:32,670
The forms are not
in the latest

744
00:25:32,670 --> 00:25:34,370
version of Protege desktop.

745
00:25:34,755 --> 00:25:36,195
It used to be that
there was a version

746
00:25:36,195 --> 00:25:38,215
of Prodigi that had
a form system.

747
00:25:38,995 --> 00:25:40,835
But in the latest iteration of

748
00:25:40,835 --> 00:25:42,135
the desktop version,

749
00:25:42,275 --> 00:25:43,575
that's no longer true.

750
00:25:43,875 --> 00:25:46,355
So forms will be
exclusively in

751
00:25:46,355 --> 00:25:48,215
the web version
of Web Prodigi.

752
00:25:48,915 --> 00:25:51,300
And we've also got this entity

753
00:25:51,600 --> 00:25:52,900
based visualization,

754
00:25:53,920 --> 00:25:55,680
in Web Protege
where you select

755
00:25:55,680 --> 00:25:57,540
an entity and you see
all the relationships

756
00:25:58,240 --> 00:26:00,260
focused on that
entity outwards.

757
00:26:01,040 --> 00:26:03,460
In Protege, we do
have visualization

758
00:26:03,520 --> 00:26:05,380
plugins that have
been contributed

759
00:26:05,520 --> 00:26:06,340
by the community.

760
00:26:07,255 --> 00:26:08,875
But these tend to
be visualizations

761
00:26:09,095 --> 00:26:10,315
of the entire ontology.

762
00:26:11,175 --> 00:26:13,115
So you get a lot
of information

763
00:26:13,255 --> 00:26:15,495
there and oftentimes this is

764
00:26:15,495 --> 00:26:17,435
just too much to handle.

765
00:26:17,895 --> 00:26:19,255
In my protege we've discovered

766
00:26:19,255 --> 00:26:20,615
that even an entity based

767
00:26:20,615 --> 00:26:22,420
visualization is already too

768
00:26:22,420 --> 00:26:23,560
much in many cases.

769
00:26:24,420 --> 00:26:25,700
And we've had to develop this

770
00:26:25,700 --> 00:26:28,660
filters mechanism,
to cater to that.

771
00:26:28,660 --> 00:26:30,840
And so, to have
a visualization

772
00:26:31,140 --> 00:26:32,680
of the whole
ontology in desktop

773
00:26:32,740 --> 00:26:34,660
protege, is helpful,

774
00:26:34,660 --> 00:26:36,200
but only in certain
scenarios.

775
00:26:36,735 --> 00:26:38,495
And Web Protege
takes that a few

776
00:26:38,495 --> 00:26:40,735
steps further,
by providing all

777
00:26:40,735 --> 00:26:42,015
of the flexibility that I've

778
00:26:42,015 --> 00:26:42,995
described here.

779
00:26:44,095 --> 00:26:45,295
So it sounds a little like,

780
00:26:45,695 --> 00:26:47,395
Protege was
the experimentation

781
00:26:48,175 --> 00:26:50,335
platform, and Web
Protege is taking,

782
00:26:50,335 --> 00:26:53,840
like, the best,
the best of that,

783
00:26:53,900 --> 00:26:54,860
the best practices,

784
00:26:54,860 --> 00:26:56,540
and implementing
them in a coherent

785
00:26:56,540 --> 00:27:00,400
tool. That's at least what I'm

786
00:27:00,780 --> 00:27:02,240
feeling now.

787
00:27:05,260 --> 00:27:06,560
So use of Skoast.

788
00:27:07,025 --> 00:27:08,385
That's why Protege supports

789
00:27:08,625 --> 00:27:09,985
support the use of Skost.

790
00:27:09,985 --> 00:27:14,645
So in general,

791
00:27:15,265 --> 00:27:18,165
Protege and Web Protege
are OWL tools.

792
00:27:18,545 --> 00:27:22,520
And, and so we play
by the semantics

793
00:27:22,660 --> 00:27:23,640
of OWL.

794
00:27:24,180 --> 00:27:27,240
So while we can use COS as,

795
00:27:28,420 --> 00:27:31,400
non logical parts
of the ontologies

796
00:27:31,620 --> 00:27:34,355
so as to have annotations,

797
00:27:34,355 --> 00:27:36,115
cause annotations,
for example,

798
00:27:36,115 --> 00:27:37,895
for labels, preferred labels,

799
00:27:38,355 --> 00:27:39,735
definitions, and whatnot.

800
00:27:40,435 --> 00:27:42,455
We the the tools themselves,

801
00:27:44,435 --> 00:27:46,350
are only work with
our semantics.

802
00:27:46,350 --> 00:27:47,950
So they will not so it's cost

803
00:27:47,950 --> 00:27:49,330
narrower or broader,

804
00:27:50,270 --> 00:27:53,170
are not catered to in
in Prodigia tools.

805
00:27:53,550 --> 00:27:55,950
But you can use
terms from this

806
00:27:55,950 --> 00:27:58,770
cost vocabulary in,
in our ontologies.

807
00:27:58,990 --> 00:28:01,635
And so that's the that's
the compatibility

808
00:28:01,855 --> 00:28:04,575
that is provided. Great.

809
00:28:04,575 --> 00:28:05,875
Thank you for your answer.

810
00:28:06,815 --> 00:28:09,155
So a lot of excitement
around the forms,

811
00:28:09,615 --> 00:28:10,735
in in the questions.

812
00:28:10,735 --> 00:28:14,410
And, so, the first question,

813
00:28:15,350 --> 00:28:19,290
from Olivier is, forms
are for classes,

814
00:28:19,350 --> 00:28:20,650
right, not for instances.

815
00:28:23,350 --> 00:28:25,430
Forms can be for
classes and for

816
00:28:25,430 --> 00:28:28,495
instances. In this in this new

817
00:28:28,495 --> 00:28:30,095
form system that
we've built in

818
00:28:30,095 --> 00:28:30,755
Web Produce,

819
00:28:32,175 --> 00:28:33,535
we've we've
designed it so that

820
00:28:33,535 --> 00:28:35,135
it can acquire information not

821
00:28:35,135 --> 00:28:36,175
just about classes,

822
00:28:36,175 --> 00:28:38,895
but individuals
as well and and

823
00:28:38,895 --> 00:28:39,795
it can actually,

824
00:28:41,310 --> 00:28:43,810
it can actually
acquire information

825
00:28:43,870 --> 00:28:45,970
that describe not
just one entity,

826
00:28:46,350 --> 00:28:47,710
but multiple entities.

827
00:28:47,710 --> 00:28:49,550
So if you wanted to acquire

828
00:28:49,550 --> 00:28:51,570
information about
the subclasses

829
00:28:51,870 --> 00:28:53,170
of Airbus aircraft,

830
00:28:53,715 --> 00:28:55,235
as you saw in
the screenshot in

831
00:28:55,235 --> 00:28:56,855
the figure, we can
actually do that.

832
00:28:57,235 --> 00:28:59,495
So we can describe classes,

833
00:29:00,115 --> 00:29:02,195
individuals, or collections of

834
00:29:02,195 --> 00:29:05,495
these in some cases. Great.

835
00:29:07,880 --> 00:29:09,800
And what's
the release date for

836
00:29:09,800 --> 00:29:10,940
the forms and,

837
00:29:11,640 --> 00:29:13,240
is there a better
version we can

838
00:29:13,240 --> 00:29:17,880
play with? So this
is a good point.

839
00:29:18,440 --> 00:29:19,800
As you know, all
of the project,

840
00:29:19,800 --> 00:29:21,160
all of the software that we do

841
00:29:21,160 --> 00:29:22,220
is open source.

842
00:29:22,360 --> 00:29:23,935
So if you actually go on to

843
00:29:23,935 --> 00:29:26,435
the Web Protege,
GitHub repository,

844
00:29:27,215 --> 00:29:28,675
you'll find this forums,

845
00:29:29,455 --> 00:29:31,855
feature is is in a branch of

846
00:29:31,855 --> 00:29:33,635
the Web Protege, codebase.

847
00:29:34,415 --> 00:29:35,955
So you can absolutely,

848
00:29:37,540 --> 00:29:38,500
experiment with it,

849
00:29:38,500 --> 00:29:40,360
install your own
version of a protege

850
00:29:40,900 --> 00:29:42,740
with the forms branch and and

851
00:29:42,740 --> 00:29:43,960
play around with it.

852
00:29:44,260 --> 00:29:46,020
It is not yet live,

853
00:29:46,020 --> 00:29:48,360
and we don't expect
it to be this year,

854
00:29:48,820 --> 00:29:50,455
but we do expect
to release it,

855
00:29:50,935 --> 00:29:53,015
in the first quarter of twenty

856
00:29:53,015 --> 00:29:53,755
twenty one.

857
00:29:55,095 --> 00:29:56,535
We don't have a fixed date,

858
00:29:57,175 --> 00:29:59,815
but but in the next
few months,

859
00:29:59,815 --> 00:30:01,415
we would hope to have it.

860
00:30:01,415 --> 00:30:02,315
But in the meantime,

861
00:30:03,015 --> 00:30:04,555
you can experiment with it.

862
00:30:05,220 --> 00:30:07,320
And it's quite easy to install

863
00:30:07,380 --> 00:30:08,900
your own version of AprylGA in

864
00:30:08,900 --> 00:30:09,720
your own system.

865
00:30:10,260 --> 00:30:13,000
And, we're always here
to help in case.

866
00:30:15,300 --> 00:30:16,120
Thank you.

867
00:30:17,315 --> 00:30:19,175
Couple questions
about the BASF,

868
00:30:19,715 --> 00:30:21,975
ontology, the chemistry,
ontology.

869
00:30:22,355 --> 00:30:24,435
Frederick asked
if the ontology

870
00:30:24,435 --> 00:30:25,655
is open and available?

871
00:30:28,515 --> 00:30:30,775
No. So all of these,

872
00:30:31,190 --> 00:30:32,870
both the Pinterest
and the Elsevier

873
00:30:32,870 --> 00:30:34,310
and the BSF knowledge graphs

874
00:30:34,310 --> 00:30:36,150
that we've been,
working with,

875
00:30:36,150 --> 00:30:38,090
they're all, proprietary.

876
00:30:38,310 --> 00:30:41,770
So we, they're not
open to the public.

877
00:30:43,270 --> 00:30:45,110
We basically can
describe the kinds

878
00:30:45,110 --> 00:30:47,675
of of work that we did to,

879
00:30:48,775 --> 00:30:50,635
allow these companies to,

880
00:30:51,815 --> 00:30:53,495
engineer and
curate their their

881
00:30:53,495 --> 00:30:54,315
knowledge graphs,

882
00:30:54,855 --> 00:30:56,455
but we can't describe
their content,

883
00:30:56,455 --> 00:30:59,830
unfortunately.
So I've heard in

884
00:30:59,830 --> 00:31:02,710
your vocabulary
the use of the switch

885
00:31:02,710 --> 00:31:04,650
from ontology to
knowledge graph

886
00:31:04,790 --> 00:31:07,290
on a fluid continuum,

887
00:31:08,710 --> 00:31:10,250
and especially for this BASF.

888
00:31:10,470 --> 00:31:13,130
So you call it
a knowledge graph.

889
00:31:13,195 --> 00:31:15,995
So my question was,

890
00:31:15,995 --> 00:31:17,355
so these seven hundred million

891
00:31:17,355 --> 00:31:20,495
axioms actually are
ontology instances,

892
00:31:20,555 --> 00:31:23,115
right? They are
entities of a knowledge

893
00:31:23,115 --> 00:31:27,040
graph. Is that correct?
That is correct.

894
00:31:27,040 --> 00:31:29,440
Yes. So so all of these thirty

895
00:31:29,440 --> 00:31:31,200
million classes or so that are

896
00:31:31,200 --> 00:31:33,120
described by these
seven hundred

897
00:31:33,120 --> 00:31:36,080
million axioms,
they're all at the,

898
00:31:36,480 --> 00:31:37,920
class level. They're they're,

899
00:31:38,480 --> 00:31:40,725
they include public ontologies

900
00:31:40,865 --> 00:31:42,945
such as the gene ontology or

901
00:31:42,945 --> 00:31:44,785
this chemical entities for

902
00:31:44,785 --> 00:31:46,805
biological interest ontology

903
00:31:47,425 --> 00:31:49,825
because these can be
reused to define,

904
00:31:50,385 --> 00:31:52,725
chemicals that are of
interest to BASF.

905
00:31:53,960 --> 00:31:56,600
And so
the representation itself

906
00:31:56,600 --> 00:31:58,860
is very much at
the OWL level.

907
00:32:00,120 --> 00:32:01,900
Not a lot of instance data.

908
00:32:02,600 --> 00:32:05,845
But but to go back to the flow

909
00:32:05,845 --> 00:32:07,705
between ontologies and
knowledge graphs,

910
00:32:08,165 --> 00:32:10,485
I have done it in a I've said

911
00:32:10,485 --> 00:32:12,745
this in a way that ontologies

912
00:32:13,125 --> 00:32:16,485
are typically used as a,

913
00:32:16,885 --> 00:32:18,745
as the basis for
the construction

914
00:32:18,885 --> 00:32:20,230
of of these knowledge graphs.

915
00:32:20,230 --> 00:32:21,990
Or at least it has
been in the cases

916
00:32:21,990 --> 00:32:23,370
that we've been dealing with.

917
00:32:24,070 --> 00:32:25,750
So Pinterest for example has

918
00:32:25,750 --> 00:32:26,730
built an ontology,

919
00:32:27,590 --> 00:32:29,690
and then they have
other databases

920
00:32:30,310 --> 00:32:31,850
from which they extract

921
00:32:32,310 --> 00:32:34,765
relationships that
connect these

922
00:32:34,765 --> 00:32:36,385
databases to the ontology.

923
00:32:37,245 --> 00:32:39,245
So everything
becomes one giant

924
00:32:39,245 --> 00:32:40,465
knowledge graph that includes

925
00:32:40,925 --> 00:32:43,325
a logic based
representation of

926
00:32:43,325 --> 00:32:44,845
the the things
of most interest

927
00:32:44,845 --> 00:32:46,285
and the logical
definitions that

928
00:32:46,285 --> 00:32:48,285
can be done. And
those that are

929
00:32:48,285 --> 00:32:49,585
of interest for reasoning,

930
00:32:50,440 --> 00:32:52,060
those are expressed in OWL.

931
00:32:52,680 --> 00:32:54,600
And then you've
got these other

932
00:32:54,600 --> 00:32:56,280
bits of information coming in

933
00:32:56,280 --> 00:32:57,260
from other databases,

934
00:32:57,640 --> 00:32:59,260
which are basically
like triples.

935
00:33:00,200 --> 00:33:02,855
And and these will
bridge the gap

936
00:33:02,855 --> 00:33:04,135
between sort of relational

937
00:33:04,135 --> 00:33:05,415
databases or other kinds of

938
00:33:05,415 --> 00:33:07,755
databases and ontology level,

939
00:33:08,295 --> 00:33:10,695
knowledge. And this is sort of

940
00:33:10,695 --> 00:33:13,735
the same in in in BASF and and

941
00:33:13,735 --> 00:33:18,310
Elsevier where
they want to have

942
00:33:19,650 --> 00:33:22,070
a high level description of

943
00:33:22,530 --> 00:33:24,950
entities in their domain and

944
00:33:25,250 --> 00:33:27,090
have that be the basis upon

945
00:33:27,090 --> 00:33:29,265
which they interlink all of

946
00:33:29,265 --> 00:33:32,325
the data in their
databases that can be,

947
00:33:33,585 --> 00:33:35,105
and that they are
interested in

948
00:33:35,105 --> 00:33:37,605
mapping to ontologies
and querying,

949
00:33:38,465 --> 00:33:39,365
using ontologies.

950
00:33:43,020 --> 00:33:45,360
Great. Thank you.

951
00:33:45,980 --> 00:33:49,760
We're we're almost,
out of time.

952
00:33:50,540 --> 00:33:52,060
Maybe one one small question

953
00:33:52,060 --> 00:33:54,185
from Daniel. Is there any plan

954
00:33:54,185 --> 00:33:56,365
to add a graphical editing

955
00:33:56,585 --> 00:33:58,745
functionality? I'm not exactly

956
00:33:58,745 --> 00:34:00,185
sure how to interpret that.

957
00:34:00,185 --> 00:34:02,125
Maybe directly on the graph

958
00:34:03,385 --> 00:34:05,815
visualization would
be the question.

959
00:34:07,410 --> 00:34:08,930
So basically,
sort of like drag

960
00:34:08,930 --> 00:34:11,670
and dropping things
in the in the graph?

961
00:34:14,450 --> 00:34:16,450
Inside like grapho. So yes.

962
00:34:16,450 --> 00:34:17,730
That that would be drag and

963
00:34:17,730 --> 00:34:19,190
dropping notes and
relationships.

964
00:34:20,365 --> 00:34:22,445
Right. Right. So
at the moment,

965
00:34:22,445 --> 00:34:23,485
we don't have,

966
00:34:23,805 --> 00:34:25,965
any plan to to do
this sort of,

967
00:34:26,685 --> 00:34:27,985
to have this kind of support,

968
00:34:29,325 --> 00:34:31,265
basically, because
we've not really had,

969
00:34:32,285 --> 00:34:34,065
a lot of interest in it.

970
00:34:34,205 --> 00:34:35,105
And so,

971
00:34:36,200 --> 00:34:37,880
there has been
interest in doing

972
00:34:37,880 --> 00:34:40,440
things like bulk operations in

973
00:34:40,440 --> 00:34:41,100
an ontology.

974
00:34:42,680 --> 00:34:43,960
And this was
something actually

975
00:34:43,960 --> 00:34:45,480
recent that I
didn't mention but

976
00:34:45,480 --> 00:34:47,500
that we did in
the Pinterest work.

977
00:34:48,005 --> 00:34:50,085
Because it was
it was useful to

978
00:34:50,085 --> 00:34:52,585
be able to take a chunk
of the ontology

979
00:34:52,645 --> 00:34:54,905
and just sort of
like subclasses

980
00:34:55,045 --> 00:34:57,785
an entire tree and
just put that onto,

981
00:34:58,725 --> 00:35:00,265
another part of
the hierarchy.

982
00:35:00,730 --> 00:35:01,950
And that is possible.

983
00:35:02,570 --> 00:35:04,650
But we've not had
much requests

984
00:35:04,650 --> 00:35:06,810
for the other way around doing

985
00:35:06,810 --> 00:35:08,890
this sort of fine grained drag

986
00:35:08,890 --> 00:35:10,250
and drop things in the graph.

987
00:35:10,250 --> 00:35:11,770
Although we can
totally see that

988
00:35:11,770 --> 00:35:13,470
it might be desirable
in many cases,

989
00:35:14,255 --> 00:35:16,195
we've not had much
push for it.

990
00:35:16,975 --> 00:35:19,075
But we'd be happy
to consider it.

